%% Model Validation: Manual vs. Automated Linearization
% This script compares the manually derived state-space model with the one
% automatically generated by the Simulink Model Linearizer app at t=2s.
% It uses a robust interpolation method to get parameters for the manual model.

clear; clc; close all;

%% 1. Load Simulation Data
filename = '/Users/jonno/MATLAB-Drive/Rocket-Model-Simulation/STEVE_Simulator/Simulator_Core/output_data/simOut_heavy_benchmark.mat';
load(filename);
fprintf('Successfully loaded flight data.\n');

%% 2. Data from Automated Linearization (Simulink App)
% This data is from your successful linearization at t=2s.
A_auto = [ 0       1         0         0         0         0         0;
          -6438    -72.64    1006     -2410      0      -17800     -7688;
           1.941    0       -0.000199  -2.74    -0.0002433  -2.32     -1.108;
          12.69     0        2.74     0.0001503  0.00003711  5.559     -9.758;
           0        0       -0.9936    0.1128     0         0         -2.932;
           1637     0        0.04897   0.02043   0.004744   0.00541    0;
           0        0        0         0         0         1         0];

B_auto = [0; 3844; 0; 0; 0; 0; 0];
C_auto = [0 0 0 0 0 0 1; 0 0 -0.06393 0.1532 0 0 0; 0 0 0 0 0 1 0];
D_auto = [0; 0; 0];

sys_auto = ss(A_auto, B_auto, C_auto, D_auto);
sys_auto.OutputName = {'theta', 'alpha', 'q'};

%% 3. Calculate Manually Derived Model at t=2s

% Define time for analysis
t_analysis = 2.0;
fprintf('Extracting manual model parameters at t = %.2f seconds.\n', t_analysis);

% Define paths to the signals in the logsout data structure
logsout_data = simOut.logsout;
paths = struct();
paths.V = 'airspeed';
paths.rho = 'ENV.AirDensity';
paths.mass = 'mass';
paths.I = 'I';
paths.T = 'engineThrust';
paths.CNa = 'Cnalpha';
paths.CMa = 'Cmalpha';
paths.Cmq = 'cmq';
paths.L_arm = 'CG_X';

% Interpolate all required parameters at the analysis time
interp_data = struct();
field_names = fieldnames(paths);
for i = 1:length(field_names)
    signal_name = field_names{i};
    signal_path = paths.(signal_name);
    try
        signal_obj = get_nested_signal(logsout_data, signal_path);
        ts = signal_obj.Values;
        if strcmp(signal_name, 'I')
            inertia_data = squeeze(ts.Data(2,2,:));
            interp_data.(signal_name) = interp1(ts.Time, inertia_data, t_analysis, 'linear', 'extrap');
        else
            interp_data.(signal_name) = interp1(ts.Time, squeeze(ts.Data), t_analysis, 'linear', 'extrap');
        end
    catch ME
        error('Failed to extract or interpolate signal "%s": %s', signal_path, ME.message);
    end
end
fprintf('Parameter interpolation complete.\n\n');

% Assign interpolated data to variables for clarity
m       = interp_data.mass;
I       = interp_data.I;
L_arm   = interp_data.L_arm;
V       = interp_data.V;
rho     = interp_data.rho;
T       = interp_data.T;
CNalpha = interp_data.CNa;
Cmalpha = interp_data.CMa;
Cmq     = interp_data.Cmq;

% Geometric and Actuator Constants
S = 0.200296; L = 9.542;
wn = 62; zeta = 0.5858;
A_act = [0 1; -wn^2 -2*zeta*wn];
B_act = [0; wn^2];
C_act = [1 0];

% Build Manual State-Space Model
q_dyn = 0.5 * rho * V^2;
Z_alpha = (q_dyn * S / m) * CNalpha; Z_delta = T / m;
M_alpha = (q_dyn * S * L * Cmalpha) / I; M_q = (q_dyn * S * L^2 / (2 * V * I)) * Cmq;
M_delta = (T * L_arm) / I;

A_plant = [-Z_alpha/V, 1, 0; M_alpha, M_q, 0; 0, 1, 0];
B_plant = [-Z_delta/V; M_delta; 0];

A_manual = [A_plant, B_plant*C_act; zeros(2,3), A_act];
B_manual = [zeros(3,1); B_act];
C_manual = [0 0 1 0 0; 1 0 0 0 0; 0 1 0 0 0];
D_manual = [0; 0; 0];

sys_manual = ss(A_manual, B_manual, C_manual, D_manual);
sys_manual.OutputName = {'theta', 'alpha', 'q'};

%% 4. Perform Comparison
fprintf('--- Model Comparison Results ---\n\n');

% Comparison 1: System Poles (Eigenvalues)
poles_auto = sort(eig(A_auto), 'descend');
poles_manual = sort(eig(A_manual), 'descend');

disp('Automated Model Poles:'); disp(poles_auto');
disp('Manual Model Poles:'); disp(poles_manual');

% Comparison 2: Step Response
figure;
step(sys_auto, 'b', sys_manual, 'r--', 10);
title('Step Response Comparison (Outputs)');
legend('Automated Model (from Simulink)', 'Manual Model (from Equations)');
grid on;

% Comparison 3: Bode Plot (Frequency Response)
figure;
bode(sys_auto(1,1), 'b', sys_manual(1,1), 'r--');
title('Bode Plot Comparison (Input to Pitch Angle)');
legend('Automated Model (from Simulink)', 'Manual Model (from Equations)');
grid on;

%% Helper Function
function signal_obj = get_nested_signal(logsout_data, path_str)
    path_parts = strsplit(path_str, '.');
    try
        current_obj = logsout_data.getElement(path_parts{1});
        if length(path_parts) > 1
            current_struct = current_obj.Values;
            for k = 2:length(path_parts)
                current_struct = current_struct.(path_parts{k});
            end
            signal_obj.Values = current_struct;
        else
            signal_obj = current_obj;
        end
    catch ME
        rethrow(ME);
    end
end
